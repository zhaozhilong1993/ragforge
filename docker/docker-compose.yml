include:
  - ./docker-compose-base.yml

# To ensure that the container processes the locally modified `service_conf.yaml.template` instead of the one included in its image, you need to mount the local `service_conf.yaml.template` to the container.
services:
  ragflow:
    depends_on:
      mysql-ragflow:
        condition: service_healthy
      redis-ragflow:
        condition: service_healthy
          #es01:
          #  condition: service_healthy
          #minio-ragflow:
          #condition: service_healthy
    image: ${RAGFLOW_IMAGE}
    shm_size: '128gb'
    container_name: ragflow-server
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              #count: all
              device_ids: ['0','1']
              capabilities: [gpu]
    ports:
      - ${SVR_HTTP_PORT}:9380
      - 80:80
      - 9980:9980
      - 443:443
      - 5678:5678
      - 5679:5679
    volumes:
      - /var/lib/gpustack/ragflow/logs:/ragflow/logs
      - ./certs/ca.crt:/ragflow/ca.crt
      - ../rag:/ragflow/rag
      - ../api:/ragflow/api
      - ../minerU:/ragflow/minerU
      - /root/.cache:/root/.cache
      - /root/magic-pdf.json:/root/magic-pdf.json
      - ./nginx/ragflow.conf:/etc/nginx/conf.d/ragflow.conf
      - ./nginx/proxy.conf:/etc/nginx/proxy.conf
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/private.key:/etc/nginx/private.key
      - ./nginx/public.crt:/etc/nginx/public.crt
      - ../history_data_agent:/ragflow/history_data_agent
      - ./service_conf.yaml.template:/ragflow/conf/service_conf.yaml.template
      - ./s3.py:/usr/local/lib/python3.10/dist-packages/magic_pdf/data/io/s3.py
      - ./_client.py:/ragflow/.venv/lib/python3.10/site-packages/httpx/_client.py
      - ../conf/llm_factories.json:/ragflow/conf/llm_factories.json
      - ../tests:/ragflow/tests
    env_file: .env
    environment:
      - TZ=${TIMEZONE}
      - HF_ENDPOINT=${HF_ENDPOINT}
      - MACOS=${MACOS}
      - LM_TIMEOUT_SECONDS=120
      - LLM_MAX_RETRIES=1
      - LLM_BASE_DELAY=2
        # - SSL_CERT_FILE="/etc/nginx/public.crt"
        #- CUDA_VISIBLE_DEVICES=1
        #- NCCL_SOCKET_IFNAME=bond0.128
        #- NCCL_IB_DISABLE=1
        #- NCCL_P2P_DISABLE=1
        #- NCCL_DEBUG=INFO
    networks:
      ragflow:
        ipv4_address: 172.20.0.254
    restart: on-failure
    # https://docs.docker.com/engine/daemon/prometheus/#create-a-prometheus-configuration
    # If you're using Docker Desktop, the --add-host flag is optional. This flag makes sure that the host's internal IP gets exposed to the Prometheus container.
    extra_hosts:
      - "host.docker.internal:host-gateway"
        #executor:
        #  depends_on:
        #    mysql:
        #      condition: service_healthy
        #  image: ${RAGFLOW_IMAGE}
        #  container_name: ragflow-executor
        #  volumes:
        #    - ./ragflow-logs:/ragflow/logs
        #    - /var/lib/gpustack/ragflow/ragflow/api/apps/kb_app.py:/ragflow/api/apps/kb_app.py
        #      #- /var/lib/gpustack/ragflow/ragflow/rag/nlp/search.py:/ragflow/rag/nlp/search.py
        #      #- /var/lib/gpustack/ragflow/ragflow/rag/svr/task_executor.py:/ragflow/rag/svr/task_executor.py
        #      #- /var/lib/gpustack/ragflow/ragflow/rag/utils/minio_conn.py:/ragflow/rag/utils/minio_conn.py
        #    - ./nginx/ragflow.conf:/etc/nginx/conf.d/ragflow.conf
        #    - ./nginx/proxy.conf:/etc/nginx/proxy.conf
        #    - ./nginx/nginx.conf:/etc/nginx/nginx.conf
        #  env_file: .env
        #  environment:
        #    - TZ=${TIMEZONE}
        #    - HF_ENDPOINT=${HF_ENDPOINT}
        #    - MACOS=${MACOS}
        #  entrypoint: "/ragflow/entrypoint.sh 1 3"
        #  networks:
        #    - ragflow
        #  restart: on-failure
        #  # https://docs.docker.com/engine/daemon/prometheus/#create-a-prometheus-configuration
        #  # If you're using Docker Desktop, the --add-host flag is optional. This flag makes sure that the host's internal IP gets exposed to the Prometheus container.
        #  extra_hosts:
        #    - "host.docker.internal:host-gateway"
